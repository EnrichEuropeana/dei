package pl.psnc.dei.service;

import org.apache.jena.atlas.json.JSON;
import org.apache.jena.atlas.json.JsonValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.BodyInserters;
import org.springframework.web.reactive.function.client.WebClient;
import pl.psnc.dei.exception.DEIHttpException;
import pl.psnc.dei.model.Transcription;
import pl.psnc.dei.request.RestRequestExecutor;
import reactor.core.publisher.Mono;

import javax.annotation.PostConstruct;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Service
public class EuropeanaAnnotationsService extends RestRequestExecutor {

    private static final Logger logger = LoggerFactory.getLogger(EuropeanaAnnotationsService.class);

    private static final Pattern ANNOTATION_ID_PATTERN = Pattern.compile(".*\\/([0-9]*)");

    private static final String ID = "id";

    @Value("${europeana.api.annotations.endpoint}")
    private String annotationApiEndpoint;

    @Value("${api.userToken}")
    private String userToken;

    public EuropeanaAnnotationsService(WebClient.Builder webClientBuilder) {
        configure(webClientBuilder);
    }

    @PostConstruct
    private void configure() {
        setRootUri(annotationApiEndpoint);
        logger.info("Will use {} url.", annotationApiEndpoint);
    }


    /**
     * Sends prepared transcription (generated by Transcripton platform) to Europeana using annotationApiEndpoint
     *
     * @param transcription JSON that contains target, body and optionally annotation metadata
     * @return String that contains annotationId generated for given transcription
     */
    public String postTranscription(Transcription transcription) {
        logger.info("Sending transcription to Annotations API. Transcription: " + transcription.getTranscriptionContent().toString());
        String annotationResponse = webClient.post()
                .uri(annotationApiEndpoint)
                .header("Authorization", "Bearer " + userToken)
                .contentType(MediaType.APPLICATION_JSON)
                .body(BodyInserters.fromObject(transcription.getTranscriptionContent().toString()))
                .retrieve()
                .onStatus(HttpStatus::is4xxClientError, clientResponse -> {
                    logger.error("Error {} while posting transcription. Cause: {}", clientResponse.rawStatusCode(), clientResponse.statusCode().getReasonPhrase());
                    return Mono.error(new DEIHttpException(clientResponse.rawStatusCode(), clientResponse.statusCode().getReasonPhrase()));
                })
                .onStatus(HttpStatus::is5xxServerError, clientResponse -> {
                    logger.error("Error {} while posting transcription. Cause: {}", clientResponse.rawStatusCode(), clientResponse.statusCode().getReasonPhrase());
                    return Mono.error(new DEIHttpException(clientResponse.rawStatusCode(), clientResponse.statusCode().getReasonPhrase()));
                })
                .bodyToMono(String.class)
                .doOnError(throwable -> logger.error(throwable.getMessage()))
                .block();
        return extractAnnotationId(annotationResponse);
    }

    /**
     * Sends updated transcription (generated by Transcripton platform) to Europeana using annotationApiEndpoint
     *
     * @param transcription
     * @return
     */
    public String updateTranscription(Transcription transcription) {
        String annotationResponse = webClient.put()
                .uri(b -> b.path(annotationApiEndpoint + (annotationApiEndpoint.endsWith("/") ? "" : "/") + transcription.getAnnotationId()).build())
                .header("Authorization", "Bearer " + userToken)
                .body(BodyInserters.fromObject(transcription.getTranscriptionContent()))
                .retrieve()
                .onStatus(HttpStatus::is4xxClientError, clientResponse -> {
                    logger.error("Error {} while updating transcription. Cause: {}", clientResponse.rawStatusCode(), clientResponse.statusCode().getReasonPhrase());
                    return Mono.error(new DEIHttpException(clientResponse.rawStatusCode(), clientResponse.statusCode().getReasonPhrase()));
                })
                .onStatus(HttpStatus::is5xxServerError, clientResponse -> {
                    logger.error("Error {} while updating transcription. Cause: {}", clientResponse.rawStatusCode(), clientResponse.statusCode().getReasonPhrase());
                    return Mono.error(new DEIHttpException(clientResponse.rawStatusCode(), clientResponse.statusCode().getReasonPhrase()));
                })
                .bodyToMono(String.class)
                .block();
        return extractAnnotationId(annotationResponse);
    }

    private String extractAnnotationId(String annotationResponse) {
        if (annotationResponse != null) {
            JsonValue value = JSON.parseAny(annotationResponse);
            if (value != null && value.getAsObject().get(ID) != null) {
                Matcher matcher = ANNOTATION_ID_PATTERN.matcher(value.getAsObject().get(ID).getAsString().value());
                if (matcher.find()) {
                    return matcher.group(1);
                }
            }
        }
        return null;
    }

}
